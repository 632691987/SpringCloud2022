server:
  port: 8007

spring:
  main:
    banner-mode: off
  application:
    name: Resilience4j-Demo

management.endpoints.web.exposure.include: '*'
management.endpoint.health.show-details: always

management.health.diskspace.enabled: false
management.health.circuitbreakers.enabled: true
management.health.ratelimiters.enabled: false

management.metrics.tags.application: ${spring.application.name}
management.metrics.distribution.percentiles-histogram.http.server.requests: true
management.metrics.distribution.percentiles-histogram.resilience4j.circuitbreaker.calls: true


resilience4j.circuitbreaker:
  configs:
    default:
      slowCallRateThreshold: 50
      slidingWindowType: COUNT_BASED
      registerHealthIndicator: true

      ## 配置滑动窗口类型。当CircuitBreaker关闭时，这种类型的滑动窗口会记录调用结果。
      ## 滑动窗口要么是基于计数的，要么是基于时间的。
      ## 若滑动窗口为COUNT_BASED，则最近slidingWindowSize次的调用会被记录和统计。
      ## 若滑动窗口为TIME_BASED，则最近slidingWindowSize秒中的调用会被记录和统计。
      slidingWindowSize: 20
      minimumNumberOfCalls: 5000
      permittedNumberOfCallsInHalfOpenState: 8
      automaticTransitionFromOpenToHalfOpenEnabled: false

      ## 熔断器从打开状态到半开状态的等待时间
      waitDurationInOpenState: 5s

      ## 触发熔断的失败率阈值
      failureRateThreshold: 50
      eventConsumerBufferSize: 10

      ## 会触发失败的异常类型
      recordExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.util.concurrent.TimeoutException
        - java.io.IOException

      ## 不会触发失败的异常类型
      ignoreExceptions:
        - com.atguigu.springcloud.exception.BusinessException
  instances:
    backendA:
      baseConfig: default
    backendB:
      registerHealthIndicator: true
      slidingWindowSize: 10
      minimumNumberOfCalls: 10
      permittedNumberOfCallsInHalfOpenState: 3
      waitDurationInOpenState: 5s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
      ## After every exception thrown, resilience4J will auto check with this predicate
      recordFailurePredicate: com.atguigu.springcloud.exception.RecordFailurePredicate

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 100
      retryExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.util.concurrent.TimeoutException
        - java.io.IOException
      ignoreExceptions:
        - com.atguigu.springcloud.exception.BusinessException
  instances:
    backendA:
      baseConfig: default
    backendB:
      baseConfig: default

resilience4j.bulkhead:
  configs:
    default:
      maxConcurrentCalls: 5
  instances:
    backendA:
      maxWaitDuration: 100ms
      maxConcurrentCalls: 3
    backendB:
      maxWaitDuration: 10ms
      maxConcurrentCalls: 10

resilience4j.thread-pool-bulkhead:
  configs:
    default:
      maxThreadPoolSize: 100
      coreThreadPoolSize: 100
      queueCapacity: 200
  instances:
    backendA:
      baseConfig: default
    backendB:
      maxThreadPoolSize: 1
      coreThreadPoolSize: 1
      queueCapacity: 1



resilience4j.ratelimiter:
  configs:
    default:
      registerHealthIndicator: false
      limitForPeriod: 3
      limitRefreshPeriod: 1s
      timeoutDuration: 0
      eventConsumerBufferSize: 100
  instances:
    backendA:
      baseConfig: default
    backendB:
      limitForPeriod: 6
      limitRefreshPeriod: 500ms
      timeoutDuration: 3s

resilience4j.timelimiter:
  configs:
    default:
      cancelRunningFuture: false
      timeoutDuration: 2s
  instances:
    backendA:
      baseConfig: default
    backendB:
      baseConfig: default